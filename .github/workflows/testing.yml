name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-13

    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install dependencies
      run: |
        brew install coreutils # for gtimeout 

    - name: Fix the const issue
      run: |
        mv const-fix.patch ./libraries/amazon/amazon-kinesis-video-streams-media-interface
        cd ./libraries/amazon/amazon-kinesis-video-streams-media-interface
        git apply const-fix.patch

    - name: Edit the constants
      run: |
        sed -i '' 's/us-east-1/us-west-2/g' ./samples/kvsapp/sample_config.h
        sed -i '' 's/kvs_example_camera_stream/demo-stream/g' ./samples/kvsapp/sample_config.h

        cat ./samples/kvsapp/sample_config.h


    - name: Build project
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE="Debug"
        make -j$(sysctl -n hw.cpu)

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    - name: Run the sample
      working-directory: ./build
      run: |
        mkdir debug

        gtimeout --signal=SIGINT --kill-after=15s --preserve-status 30s ./bin/kvsappcli
        exit_code=$?
        
        echo "Process exited with code: $exit_code"

    - name: Upload MKV file
      uses: actions/upload-artifact@v4
      with:
        name: debug_output
        path: build/debug/dumped_output.mkv
        retention-days: 3

    - name: Add summary
      run: |
        echo "## ðŸŽ¬ Debug Output MKV" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”— **Download the MKV file:** [debug_output.mkv](./artifacts/debug_output/debug_output.mkv)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Œ How to Check the MKV File" >> $GITHUB_STEP_SUMMARY
        echo "You can inspect the MKV file structure using \`mkvinfo\`:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Install mkvinfo by doing:" >> $GITHUB_STEP_SUMMARY
        echo '```sh' >> $GITHUB_STEP_SUMMARY
        echo 'brew install mkvtoolnix' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“¦ **The artifact will be compressed. Unzip it first:**" >> $GITHUB_STEP_SUMMARY
        echo '```sh' >> $GITHUB_STEP_SUMMARY
        echo 'unzip debug_output.zip' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Now run `mkvinfo` on it:" >> $GITHUB_STEP_SUMMARY
        echo '```sh' >> $GITHUB_STEP_SUMMARY
        echo 'mkvinfo -v debug_output.mkv' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '> [!NOTE]'
        echo "> You can also add the `-X` flag to have a hexdump as well." >> $GITHUB_STEP_SUMMARY
